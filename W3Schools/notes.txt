Python Indentation
    Very important --> used to indicate a block of code.
    Ex.:    if 5>2:
                print("Five is greater than two!")
    You have to use the same number of spaces in the same block of code, otherwise it will generate an error.

Python Variables
    Containers for storing data values.
    There is no command for declaring it.
    It is created the moment you first assign a value to it.
        Ex.:    x = 5
                y = "John"
    Variables do not need to be declared with any particular type and can even change type after they have been set.
        Ex.:    x = 4       # x is of type int
                x = "Sally" # x is now of type str
    Casting:
        Used to specify the data type of a variable.
        Ex.:    x = str(3) # x will be '3'
                y = int(3) # y will be 3
                z = float(3) # z will be 3.0
    Get the type:
        To get the data type of a variable use the type() function.
        Ex.:    x = 5
                y = "John"
                print(type(x))
                print(type(y))
            Explanation:
                The data type of x is: <class 'int'>
                The data type of y is: <class 'str'>
    String variables can be declared using single or double quotes.
        Ex.:    x = "John"
                # is the same as
                x = 'John'
    Variable names are case-sensitive.

Python Variable Names
    Rules:
        Must start with a letter or underscore character;
        Cannot start with a number;
        Can only contain alpha-numeric characters and underscores (A-z, 0-9, and _ );
        Variable names are case-sensitive (age, Age and AGE are three different variables).
        Can't be Python Keywords.
    Ex.: 
        myvar = "John"
        my_var = "John"
        _my_var = "John"
        myVar = "John"
        MYVAR = "John"
        myvar2 = "John"

    Use mainly Snake Case.

Many Values to Multiple Variables   
    You can assign values to multiple variables in one line.
    Ex.:
        x, y, z = "Orange", "Banana", "Cherry"
        print(x)
        print(y)
        print(z)
    Obs.: The number of variables must match the number of values.

One Value to Multiple Variables
    You can assign the same value to multiple variables in one line.
    Ex.:
        x = y = z = "Orange"
        print(x)
        print(y)
        print(z)

Unpack a Collection
    Python allows you to extract the values of a collection (list, tuple, ...) into variables. 
    Ex.: Unpack a list
        fruits = ["apple", "banana", "cherry"]
        x, y, z = fruits
        print(x)
        print(y)
        print(z)

Output Variables
    'print()' function:
        Ex.: 
            x = "Python is awesome"
            print(x)
        You output multiple variables, separated by a comma:
            Ex.: 
                x = "Python"
                y = "is"
                z = "awesome"
                print(x,y,z)
        If you try to combine a string and a number with the '+' operator, it will generate an error.
            Ex.: 
                x = 5
                y = "John"
                print(x + y)
        To print multiple variables you separate them with comas, which support different data types.
            Ex.: 
                x = 5
                y = "John"
                print(x, y)
                
    '+' operator:
        Multiple variables.
        If the variables are numbers the operators works mathematicaly.
        Ex.: 
            x = "Python"
            y = "is"
            z = "awesome"
            print(x + " " + y + " " + z)

Global Variables
    Variables created outside of a function.
    Can be used by everyone, both inside and outside of functions.
        Ex.: Create a variable outside a function, and use it inside the function.
            x = "awesome"
            def myfunc():
                print("Python is " + x)
            myfunc()
    If you create a variable with the same name inside a function, this variable will be local, and can only be used inside the function.
    The global variable with the same name will stay the same, global and with original value.
        Ex.: Create a variable inside a function, with the same name as the global variable.
            x = "awesome"
            def myfunc():
                x = "fantastic"
                print("Python is " + x)
            myfunc()
            print("Python is " + x)    

The Global Keyword
    Usualy, variables created inside functions are local --> can only be used inside that function.
    The 'global' keyword is used to create a global variable inside a function;
    Ex.: 
        def myfunc():
            global x
            x = "fantastic"
        myfunc()
        print("Python is " + x)

     The 'global' keyword is also used to change a global variable inside a function.
     Ex.: 
        x = "awesome"
        def myfunc():
            global x
            x = "fantastic"
        myfunc()
        print("Python is " + x)

Python Data types 
    Variables can store data of different types.
    Python has the following data types built-in by default, in these categories:
        Text Type:      str
        Numeric Types:  int, float, complex
        Sequence Types: list, tuple, range
        Mapping Type:   dict
        Set Types:      set, frozenset
        Boolean Type:   bool
        Binary Types:   bytes, bytearray, memoryview

Getting the Data Type
    'type()' function.
    Ex.: 
        x = 5
        print(type(x))

Setting the Data Type
    Data type is set when you assign a value to a variable:
    Ex.: 
        x = "Hello World"	                # str
        x = 20	                            # int
        x = 20.5	                        # float
        x = 1j	                            # complex
        x = ["apple", "banana", "cherry"]	# list
        x = ("apple", "banana", "cherry")	# tuple
        x = range(6)	                    # range
        x = {"name" : "John", "age" : 36}	# dict
        x = {"apple", "banana", "cherry"}	# set
        x = frozenset({"apple", "banana", "cherry"})	# frozenset
        x = True	                        # bool
        x = b"Hello"	                    # bytes
        x = bytearray(5)	                # bytearray
        x = memoryview(bytes(5))	        # memoryview
        x = None                            # NoneType

Setting the Specific Data Type
    Ex.:
        x = str ("Helllo World")                    # str
        x = int (20)                                # int
        x = float (20.5)                            # float
        x = complex (1j)                            # complex
        x = list (("apple", "banana", "cherry"))	# list
        x = tuple (("apple", "banana", "cherry"))	# tuple
        x = range (6)                               # range
        x = dict (name="John", age=36)	            # dict
        x = set (("apple", "banana", "cherry"))	    # set
        x = frozenset (("apple", "banana", "cherry"))	# frozenset
        x = bool (5)                                # bool
        x = bytes (5)                               # bytes
        x = bytearray (5)                           # bytearray
        x = memoryview (bytes (5))                  # memoryview

Python numbers
    3 numeric types:
        int
        float
        complex
    Ex.:
        x = 1	    # int
        y = 2.8	    # float
        z = 1j	    # complex

Int
    Whole number (positive or negative).
    Without decimals of unlimited length.
    Ex.:
        x = 1
        y = 35656222554887711
        z = -3255522

Float
    Floating point number.
    A number, positive or negative, containing one or more decimals.
    Ex.:
        x = 1.10
        y = 1.0
        z = -35.59
    Scientific numbers (with "e") to indicate power of 10.
    Ex.: 
        x = 35e3
        y = 12E4
        z = -87.7e100

Complex
    Complex numbers are written with a "j" as the imaginary part.
    Ex.:
        x = 3+5j
        y = 5j
        z = -5j 

Type Conversion
    Methods: 'int()', 'float()', 'complex()'.
    Ex.:
        x = 1	    # int
        y = 2.8	    # float
        z = 1j	    # complex
        #convert from int to float:
        a = float(x)
        #convert from float to int:
        b = int(y)
        #convert from int to complex:
        c = complex(x)
        print(a)
        print(b)
        print(c)
        print(type(a))
        print(type(b))
        print(type(c))

Random number
    Python does not have a random() function to make a random number.
    There is a built-in module called random.
        It can be used to make random numbers.
        Ex.: Import the random module, and display a random number between 1 and 9
            import random
            print(random.randrange(1, 10))

Specify a Variable Type 
    Python is object-orientated language.
        Uses classes to define data types (including its primitive types).
    Casting:
        Using constructor functions:
            int():
                Constructs integer number from an integer literal, a float literal (removing decimals), or a string literal (if the string represents a whole number);
            float():
                Constructs a float number from an integer literal, a float literal or a string literal (providing the string represents a float or an integer);
            str():
                Constructs a string from a wide variety of data types, including strings, integer literals and float literals.
            Ex.:
                Integers:
                    x = int(1)      # x will be 1
                    y = int(2.8)    # y will be 2
                    z = int("3")    # z will be 3
                Floats:
                    x = float(1)    # x will be 1.0
                    y = float(2.8)  # y will be 2.8
                    z = float("3")  # z will be 3.0
                    w = float("4.2")# w will be 4.2
                Strings:
                    x = str("s1")   # x will be 's1'
                    y = str(2)      # y will be '2'
                    z = str(3.0)    # z will be '3.0'

Python Strings
    Surrounded by single or double quotation marks.
    'hello' == "hello".
    Display with print() function:
        Ex.:
            print("Hello")
            print('Hello')

Assign String to a Variable
    Variable name followed by an equal sign and the string.
    Ex.:
        a = "Hello"
        print(a)

Multiline Strings
    Assigned to a variable with three quotes:
        Ex.:
            a = """Lorem ipsum dolor sit amet,
            consectetur adipiscing elit,
            sed do eiusmod tempor incididunt
            ut labore et dolore magna aliqua."""
            print(a)
    Or with 3 single quotes:
        Ex.:
            a = '''Lorem ipsum dolor sit amet,
            consectetur adipiscing elit,
            sed do eiusmod tempor incididunt
            ut labore et dolore magna aliqua.'''
            print(a)

Strings are Arrays
    Strings in Python are arrays of bytes representing unicode characters.
    Python don't have a character data type.
    Single character == string with a length of 1.
    Square brackets ([]) are used to access elements of the string:
        Ex.: Get the character at position 1
            a = "Hello, World!"
            print(a[1])

            Obs.: the first character has the position 0.

Looping Through a String 
    Strings are arrays so it is possible to loop through the characters in it with a for loop:
        Ex.: Loop through the letters in the word "banana":
            for x in "banana":
                print(x)

String Length
    len() function:
        Ex.: 
            a = "Hello, World!"
            print(len(a))

Check String
    Check if certain phrase or character is present in a string.
    Using keyword 'in'.
    Ex.: Check if "free" is present in the following Text
        txt = "The best things in life are free!"
        print("free" in txt)
    Use it in an 'if' statement:
        Ex.: Print only if "free" is present
            txt = "The best things in life are free!"
            if "free" in txt:
                print("Yes, 'free' is present.")

Check if NOT
    Check if phrase or character is NOT present in a string.
    Using keyword 'not in'.
    Ex.: Check if "expensive" is NOT present in the following Text
        txt = "The best things in life are free!"
        print("expensive" not in txt)
    Use it in an 'if' statement:
        Ex.: Print only if "expensive" is NOT present
            txt = "The best things in life are free!"
            if "expensive" not in txt:
                print("Yes, 'expensive' is NOT present.")

Python - Slicing Strings
    Return a range of characters by using the slice syntax.
    Specify start index and end index, separated by a colon to return a part of the string.
    Ex.:
        Get the characters from position 2 to position 5 (not included):
            b = "Hello, World!"
            print(b[2:5])

Slice From the start
    Leave out the start index and the range will start at the first character.
    Ex.:
        Get the characters from the start to position 5 (not included):
            b = "Hello, World!"
            print(b[:5])

Slice To the end
    Leave out the end index and the range will go to the end:
    Ex.:
        Get the characters from position 2, and all the way to the end:
            b = "Hello, World!"
            print(b[2:])

Negative Indexing
    Use negative indexes to start the slice from the end of the string:
    Ex.:
        Get the characters:
            From: "o" in "World!" (position -5)
            To, but not included: "d" in "World!" (position -2):
                b = "Hello, World!"
                print(b[-5:-2])

Modify strings
    Upper Case
        upper() method:
            Ex.:
                a = "Hello, World!"
                print(a.upper())
    Lower Case
        lower() method:
            Ex.:
                a = "Hello, World!"
                print(a.lower())
    Remove Whitespace
        Space before and/or after the actual text.
        strip() method:
            Ex.:
                a = " Hello, World! "
                print(a.strip()) # returns "Hello, World!"
    Replace String
        replace() method:
            Ex.:
                a = "Hello, World!"
                print(a.replace("H", "J"))
    Split String 
        





